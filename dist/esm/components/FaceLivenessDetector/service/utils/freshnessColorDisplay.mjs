import{__awaiter as e}from"tslib";import{fillOverlayCanvasFractional as r,getRGBArrayFromColorString as o}from"./liveness.mjs";var t;!function(e){e.SCROLLING="SCROLLING",e.FLAT="FLAT"}(t||(t={}));class s{constructor(e,r){this.context=e,this.freshnessColorsSequence=r,this.isFirstTick=!0}displayColorTick(){return e(this,void 0,void 0,(function*(){return new Promise(((e,r)=>{setTimeout((()=>{this.displayNextColorTick(e,r)}),Math.min(10))}))}))}init(){this.stageIndex=0,this.currColorIndex=0,this.currColorSequence=this.freshnessColorsSequence[0],this.prevColorSequence=this.freshnessColorsSequence[0],this.stage=t.FLAT,this.timeLastFlatOrScrollChange=Date.now(),this.timeLastFaceMatchChecked=Date.now()}displayNextColorTick(e,o){const{freshnessColorEl:s}=this.context.freshnessColorAssociatedParams,{ovalDetails:i,scaleFactor:l}=this.context.ovalAssociatedParams,{videoEl:n}=this.context.videoAssociatedParams,c=Date.now();this.isFirstTick&&(this.init(),this.isFirstTick=!1,this.sendColorStartTime({tickStartTime:c,currColor:this.currColorSequence.color,prevColor:this.currColorSequence.color,currColorIndex:this.stageIndex}));let a=c-this.timeLastFlatOrScrollChange;if(s.style.display="block",(this.stage===t.FLAT&&a>=this.currColorSequence.flatDisplayDuration||this.stage===t.SCROLLING&&a>=this.currColorSequence.downscrollDuration)&&(this.incrementStageIndex(c),a=0),this.currColorIndex<this.freshnessColorsSequence.length){const o=a/(this.stage===t.SCROLLING?this.currColorSequence.downscrollDuration:this.currColorSequence.flatDisplayDuration);r({overlayCanvas:s,prevColor:this.prevColorSequence.color,nextColor:this.currColorSequence.color,videoEl:n,ovalDetails:i,heightFraction:o,scaleFactor:l}),e(!1)}else s.style.display="none",e(!0)}incrementStageIndex(e){if(this.stageIndex+=1,this.prevColorSequence=this.freshnessColorsSequence[this.currColorIndex],this.stage===t.FLAT)this.currColorIndex+=1,this.stage=t.SCROLLING;else if(this.stage===t.SCROLLING){this.freshnessColorsSequence[this.currColorIndex].flatDisplayDuration>0?this.stage=t.FLAT:(this.stage=t.SCROLLING,this.currColorIndex+=1)}this.currColorSequence=this.freshnessColorsSequence[this.currColorIndex],this.timeLastFlatOrScrollChange=Date.now(),this.currColorSequence&&this.sendColorStartTime({tickStartTime:e,currColor:this.currColorSequence.color,prevColor:this.prevColorSequence.color,currColorIndex:this.stageIndex})}sendColorStartTime({tickStartTime:e,currColor:r,prevColor:t,currColorIndex:s}){const{livenessStreamProvider:i,challengeId:l}=this.context;i.sendClientInfo({Challenge:{FaceMovementAndLightChallenge:{ChallengeId:l,ColorDisplayed:{CurrentColor:{RGB:o(r)},PreviousColor:{RGB:o(t)},SequenceNumber:s,CurrentColorStartTimestamp:e}}}})}}export{s as FreshnessColorDisplay};
